#include <iostream>
#include <cstring>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <dirent.h>
#include <fstream>
#include <ctime>
#include <sstream>
#include <iomanip>

#define PORT 8080
#define AUTH_PASSWORD "password123"
#define LOG_FILE "server_log.txt"

void logMessage(const std::string& logFile, const std::string& message) {
    std::ofstream log(logFile, std::ios::app);
    if (!log.is_open()) {
        std::cerr << "Failed to open log file: " << logFile << std::endl;
        return;
    }

    std::time_t now = std::time(nullptr);
    std::tm* localTime = std::localtime(&now);
    std::stringstream timeStream;
    timeStream << std::put_time(localTime, "%Y-%m-%d %H:%M:%S");

    log << "[" << timeStream.str() << "] " << message << std::endl;
    log.close();
}

void listFiles(int client_socket) {
    struct dirent* entry;
    DIR* dir = opendir(".");

    if (dir == nullptr) {
        std::cerr << "Could not open directory" << std::endl;
        return;
    }

    std::string fileList = "Files:\n";
    while ((entry = readdir(dir)) != nullptr) {
        fileList += entry->d_name;
        fileList += "\n";
    }
    closedir(dir);

    send(client_socket, fileList.c_str(), fileList.size(), 0);
}

void sendFile(int client_socket, const std::string& filename) {
    std::ifstream file(filename, std::ios::binary);
    if (!file.is_open()) {
        std::cerr << "Failed to open file: " << filename << std::endl;
        return;
    }

    char buffer[1024];
    while (!file.eof()) {
        file.read(buffer, sizeof(buffer));
        send(client_socket, buffer, file.gcount(), 0);
    }
    file.close();
}

void receiveFile(int client_socket, const std::string& filename) {
    std::ofstream file(filename, std::ios::binary);
    if (!file.is_open()) {
        std::cerr << "Failed to create file: " << filename << std::endl;
        return;
    }

    char buffer[1024];
    int bytesReceived;
    while ((bytesReceived = recv(client_socket, buffer, sizeof(buffer), 0)) > 0) {
        file.write(buffer, bytesReceived);
    }
    file.close();
}

bool authenticate(int client_socket) {
    char buffer[1024] = {0};
    recv(client_socket, buffer, sizeof(buffer), 0);

    if (std::string(buffer) == AUTH_PASSWORD) {
        send(client_socket, "Authentication Successful\n", 26, 0);
        return true;
    } else {
        send(client_socket, "Authentication Failed\n", 23, 0);
        return false;
    }
}

int main() {
    int server_fd, client_socket;
    struct sockaddr_in address;
    int addrlen = sizeof(address);

    server_fd = socket(AF_INET, SOCK_STREAM, 0);
    if (server_fd == 0) {
        std::cerr << "Socket failed" << std::endl;
        return -1;
    }

    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

    if (bind(server_fd, (struct sockaddr*)&address, sizeof(address)) < 0) {
        std::cerr << "Bind failed" << std::endl;
        return -1;
    }

    if (listen(server_fd, 3) < 0) {
        std::cerr << "Listen failed" << std::endl;
        return -1;
    }

    logMessage(LOG_FILE, "Server started and listening on port " + std::to_string(PORT));

    client_socket = accept(server_fd, (struct sockaddr*)&address, (socklen_t*)&addrlen);
    if (client_socket < 0) {
        std::cerr << "Accept failed" << std::endl;
        return -1;
    }

    logMessage(LOG_FILE, "Accepted connection from client.");

    if (!authenticate(client_socket)) {
        logMessage(LOG_FILE, "Client failed authentication.");
        close(client_socket);
        close(server_fd);
        return -1;
    }

    logMessage(LOG_FILE, "Client authenticated successfully.");

    char buffer[1024] = {0};
    recv(client_socket, buffer, sizeof(buffer), 0);

    if (strcmp(buffer, "LIST") == 0) {
        logMessage(LOG_FILE, "Client requested file list.");
        listFiles(client_socket);
    } else if (strncmp(buffer, "GET ", 4) == 0) {
        std::string filename = std::string(buffer + 4);
        logMessage(LOG_FILE, "Client requested file: " + filename);
        sendFile(client_socket, filename);
    } else if (strncmp(buffer, "PUT ", 4) == 0) {
        std::string filename = std::string(buffer + 4);
        logMessage(LOG_FILE, "Client is uploading file: " + filename);
        receiveFile(client_socket, filename);
    }

    logMessage(LOG_FILE, "Client disconnected.");
    close(client_socket);
    close(server_fd);

    return 0;
}


client code:

#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>

#define PORT 8080
#define BUFFER_SIZE 1024
#define LOG_FILE "client_log.txt"

// Log message function
void logMessage(const std::string& logFile, const std::string& message) {
    std::ofstream log(logFile, std::ios::app);
    if (!log.is_open()) {
        std::cerr << "Failed to open log file: " << logFile << std::endl;
        return;
    }

    std::time_t now = std::time(nullptr);
    std::tm* localTime = std::localtime(&now);

    log << "[" << std::put_time(localTime, "%Y-%m-%d %H:%M:%S") << "] " << message << std::endl;
    log.close();
}

// Function to receive file from server
void receiveFile(int sock, const std::string& filename) {
    char buffer[BUFFER_SIZE] = {0};
    std::ofstream file(filename, std::ios::binary);
    int bytesRead;

    while ((bytesRead = recv(sock, buffer, BUFFER_SIZE, 0)) > 0) {
        file.write(buffer, bytesRead);
    }

    file.close();
    logMessage(LOG_FILE, "File received: " + filename);
}

// Function to send file to server
void sendFile(int sock, const std::string& filename) {
    char buffer[BUFFER_SIZE] = {0};
    std::ifstream file(filename, std::ios::binary);

    if (!file.is_open()) {
        std::cerr << "File " << filename << " could not be opened" << std::endl;
        return;
    }

    while (file.read(buffer, BUFFER_SIZE)) {
        send(sock, buffer, BUFFER_SIZE, 0);
    }

    // Send any remaining bytes
    send(sock, buffer, file.gcount(), 0);
    file.close();
    logMessage(LOG_FILE, "File sent: " + filename);
}

int main() {
    int sock = 0;
    struct sockaddr_in serv_addr;
    char buffer[BUFFER_SIZE] = {0};
    
    // Create socket
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        std::cerr << "Socket creation error" << std::endl;
        return -1;
    }
    
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(PORT);

    // Convert IPv4 and IPv6 addresses from text to binary form
    if (inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr) <= 0) {
        std::cerr << "Invalid address/Address not supported" << std::endl;
        return -1;
    }

    // Connect to server
    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        std::cerr << "Connection Failed" << std::endl;
        return -1;
    }

    // Authentication
    std::string password;
    std::cout << "Enter password: ";
    std::cin >> password;
    send(sock, password.c_str(), password.size(), 0);

    // Receive authentication result
    recv(sock, buffer, BUFFER_SIZE, 0);
    if (std::string(buffer) == "Authentication Failed") {
        std::cerr << "Authentication Failed" << std::endl;
        close(sock);
        return -1;
    }

    logMessage(LOG_FILE, "Connected to server");

    while (true) {
        std::string command;
        std::cout << "Enter command (LIST, GET <filename>, PUT <filename>, EXIT): ";
        std::cin.ignore();
        std::getline(std::cin, command);

        if (command == "EXIT") {
            break;
        }

        // Send command to server
        send(sock, command.c_str(), command.size(), 0);

        if (command == "LIST") {
            recv(sock, buffer, BUFFER_SIZE, 0);
            std::cout << "Files:\n" << buffer << std::endl;
            logMessage(LOG_FILE, "Listed files on server");
        } else if (command.find("GET ") == 0) {
            std::string filename = command.substr(4);
            logMessage(LOG_FILE, "Requested file: " + filename);
            receiveFile(sock, filename);
        } else if (command.find("PUT ") == 0) {
            std::string filename = command.substr(4);
            logMessage(LOG_FILE, "Uploading file: " + filename);
            sendFile(sock, filename);
        } else {
            std::cout << "Invalid command." << std::endl;
        }
    }

    logMessage(LOG_FILE, "Client disconnected.");
    close(sock);

    return 0;
}

