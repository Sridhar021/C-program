threadpool.h
#ifndef THREADPOOL_H
#define THREADPOOL_H

#include <pthread.h>

typedef struct thread_pool_t thread_pool_t;

// Function prototypes
thread_pool_t *thread_pool_create(int thread_count, int queue_size);
void thread_pool_add_task(thread_pool_t *pool, void (*task_function)(void *), void *arg);
void thread_pool_cleanup(thread_pool_t *pool);

#endif // THREADPOOL_H

task_functions.h
#ifndef TASK_FUNCTIONS_H
#define TASK_FUNCTIONS_H

typedef struct
{
    int num;
    long long result;
} task_arg_t;

void factorial(void *arg);
void square(void *arg);

#endif // TASK_FUNCTIONS_H

threadpool.c
#include "../include/threadpool.h"
#include <stdlib.h>
#include <stdio.h>

typedef struct
{
    pthread_t *threads;
    int thread_count;
    int queue_size;
    // Other necessary fields...
} thread_pool_t;

thread_pool_t *thread_pool_create(int thread_count, int queue_size)
{
    thread_pool_t *pool = malloc(sizeof(thread_pool_t));
    if (!pool) return NULL;

    pool->thread_count = thread_count;
    pool->queue_size = queue_size;
    pool->threads = malloc(thread_count * sizeof(pthread_t));
    if (!pool->threads)
    {
        free(pool);
        return NULL;
    }

    // Initialize the thread pool and create worker threads...
    return pool;
}

void thread_pool_add_task(thread_pool_t *pool, void (*task_function)(void *), void *arg)
{
    // Add the task to the queue and notify a thread to execute it...
}

void thread_pool_cleanup(thread_pool_t *pool)
{
    // Clean up the thread pool, join threads, free resources...
    free(pool->threads);
    free(pool);
}

task_functions.c
#include "../include/task_functions.h"
#include <stdio.h>

void factorial(void *arg)
{
    task_arg_t *task_arg = (task_arg_t *)arg;
    int num = task_arg->num;
    long long result = 1;
    for (int i = 2; i <= num; i++)
    {
        result *= i;
    }
    task_arg->result = result;
    printf("Factorial of %d is %lld\n", num, result);
}

void square(void *arg)
{
    task_arg_t *task_arg = (task_arg_t *)arg;
    int num = task_arg->num;
    long long result = (long long)num * num;
    task_arg->result = result;
    printf("Square of %d is %lld\n", num, result);
}

main.c
#include "../include/threadpool.h"
#include "../include/task_functions.h"
#include <assert.h>
#include <stdio.h>

void run_factorial_and_square_tasks()
{
    thread_pool_t *pool = thread_pool_create(4, 8); // 4 threads, 8 queue size.

    task_arg_t args[4];
    for (int i = 0; i < 4; i++)
    {
        args[i].num = (i + 1) * 5; // 5, 10, 15, 20.
        thread_pool_add_task(pool, factorial, &args[i]);
        thread_pool_add_task(pool, square, &args[i]);
    }

    // Cleanup.
    thread_pool_cleanup(pool);
}

void test_factorial_and_square()
{
    thread_pool_t *pool = thread_pool_create(4, 8); // 4 threads, 8 queue size.

    task_arg_t args[4];
    for (int i = 0; i < 4; i++)
    {
        args[i].num = (i + 1) * 5; // 5, 10, 15, 20.
        thread_pool_add_task(pool, factorial, &args[i]);
        thread_pool_add_task(pool, square, &args[i]);
    }

    // Cleanup the thread pool and wait for all tasks to finish.
    thread_pool_cleanup(pool);

    // Validate results
    long long expected_factorials[4] = {120, 3628800, 1307674368000, 2432902008176640000};
    long long expected_squares[4] = {25, 100, 225, 400};

    for (int i = 0; i < 4; i++)
    {
        // Assert factorials
        assert(args[i].result == expected_factorials[i]);
        printf("Test passed for factorial of %d: %lld\n", args[i].num, args[i].result);

        // Reset result and compute square again for validation
        square(&args[i]);
        assert(args[i].result == expected_squares[i]);
        printf("Test passed for square of %d: %lld\n", args[i].num, args[i].result);
    }
}

int main()
{
    // Run the actual tasks
    printf("Running factorial and square tasks...\n");
    run_factorial_and_square_tasks();

    // Run the tests
    printf("\nRunning tests...\n");
    test_factorial_and_square();
    printf("All tests passed.\n");

    return 0;
}


Makefile
# Compiler and flags
CC = gcc
CFLAGS = -pthread -Wall

# Directories
SRC_DIR = src
INCLUDE_DIR = include

# Source files
SRC_FILES = $(SRC_DIR)/threadpool.c $(SRC_DIR)/task_functions.c $(SRC_DIR)/main.c

# Executable name
EXEC = threadpool_example

# Default target
all: $(EXEC)

# Build main program
$(EXEC): $(SRC_FILES)
	$(CC) $(CFLAGS) -I$(INCLUDE_DIR) -o $(EXEC) $(SRC_FILES)

# Clean up
clean:
	rm -f $(EXEC)
