#include "../include/threadpool.h"
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

typedef struct {
    int input;
    long long output;
} test_arg_t;

void test_task(void *arg) {
    test_arg_t *test_arg = (test_arg_t *)arg;
    test_arg->output = 1;
    for (int i = 1; i <= test_arg->input; i++) {
        test_arg->output *= i;
    }
    printf("Task with input %d completed. Result: %lld\n", test_arg->input, test_arg->output);
}

void run_tests() {
    // Create a thread pool with 4 threads and a queue size of 10
    thread_pool_t *pool = thread_pool_create(4, 10);
    
    // Test 1: Adding a single task
    test_arg_t test1 = { .input = 5, .output = 0 };
    thread_pool_add_task(pool, test_task, &test1);

    // Test 2: Adding multiple tasks
    test_arg_t tests[4];
    for (int i = 0; i < 4; i++) {
        tests[i].input = (i + 1) * 3; // Inputs: 3, 6, 9, 12
        tests[i].output = 0;
        thread_pool_add_task(pool, test_task, &tests[i]);
    }

    // Wait for tasks to complete
    thread_pool_cleanup(pool);

    // Validate results
    assert(test1.output == 120); // 5! = 120
    assert(tests[0].output == 6); // 3! = 6
    assert(tests[1].output == 720); // 6! = 720
    assert(tests[2].output == 362880); // 9! = 362880
    assert(tests[3].output == 479001600); // 12! = 479001600

    printf("All tests passed!\n");
}

int main() {
    run_tests();
    return 0;
}
